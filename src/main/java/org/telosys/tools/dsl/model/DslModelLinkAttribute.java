/**
 *  Copyright (C) 2008-2017  Telosys project org. ( http://www.telosys.org/ )
 *
 *  Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *          http://www.gnu.org/licenses/lgpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.telosys.tools.dsl.model;

import org.telosys.tools.commons.StrUtil;
import org.telosys.tools.generic.model.LinkAttribute;

/**
 * Join Column implementation for DSL model <br>
 * 
 * @author L.Guerin
 * 
 */
/***
  JPA examples :
 
   @ManyToOne 
   @JoinColumn(name="ADDR_ID") 
   private Address address;
   
   @ManyToOne(fetch = FetchType.LAZY)
   @JoinColumns({
      @JoinColumn(name="ADDR_ID", referencedColumnName="ID"),
      @JoinColumn(name="ADDR_ZIP", referencedColumnName="ZIP")
   })
   private Address address;
    
***/
public class DslModelLinkAttribute implements LinkAttribute {
	
	private static final String CONTRUCTOR_ERROR = "Join Attribute constructor error : ";

	// JPA doc : (Optional) The name of the foreign key column.
	private final String name;

	// JPA doc : (Optional) The name of the attribute referenced by this foreign key column.
	private final String referencedName ; 

	// JPA doc : (Optional) Whether the property is a unique key.
	private boolean unique = false; // JPA doc : Default: false

	// JPA doc :  (Optional) Whether the foreign key column is nullable.
	private boolean nullable = true; // JPA doc : Default: true

	// JPA doc : (Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.
	private boolean updatable  = true;  // JPA doc : Default: true

	// JPA doc : (Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.
	private boolean insertable = true;  // JPA doc : Default: true

	// Other JPA elements :
	// . table : (Optional) The name of the table that contains the column.
	// . columnDefinition : (Optional) The SQL fragment that is used when generating the DDL for the column.
	
	/**
	 * Constructor
	 * @param name
	 * @param referencedName
	 */
	public DslModelLinkAttribute(String name, String referencedName) {
		if ( StrUtil.nullOrVoid(name)) {
			throw new IllegalArgumentException(CONTRUCTOR_ERROR + "'name' is null or void");
		}
		this.name = name;
		if ( StrUtil.nullOrVoid(referencedName)) {
			throw new IllegalArgumentException(CONTRUCTOR_ERROR + "'referencedName' is null or void");
		}
		this.referencedName = referencedName;
	}
	
	@Override
	public String getOriginAttributeName() {
		return name;
	}

	@Override
	public String getReferencedAttributeName() {
		return referencedName;
	}

	@Override
	public boolean isUnique() {
		return unique;
	}
	public void setUnique(boolean unique) {
		this.unique = unique;
	}

	@Override
	public boolean isNullable() {
		return nullable;
	}
	public void setNullable(boolean nullable) {
		this.nullable = nullable;
	}

	@Override
	public boolean isUpdatable() {
		return updatable;
	}
	public void setUpdatable(boolean updatable) {
		this.updatable = updatable;
	}

	@Override
	public boolean isInsertable() {
		return insertable;
	}
	public void setInsertable(boolean insertable) {
		this.insertable = insertable;
	}

}
